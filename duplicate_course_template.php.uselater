<?php
/*
Template Name: replicate a module
*/
/**
 * shows the progress on a single module based on the qs courseid parameter
 *
 * @package WordPress
 */

/* Displays customize output of links for a category.
*/
/* Get roster if there are any if not show the create roster form
*/
get_header();
?>
<?php
	global $wpdb;
	//need to add a form that asks for course id, course title, course slug (abbreviation) groups drop down (who is allowed to use the course)
	//need to add error checking and comprehensive reporting to the user about the status of the job.
	
	
        $courseID = $_GET['courseid']; //from the url
/*
	$courseTitle = $_GET['courseTitle']; //from the url
        $categoryids =$_GET['category_ids'];
	$newCourseID = 0;
	$aOriginalModules = array();
	$aNewModules = array();
	$aNewQuizPostIDs = array();
	$courseRow = $wpdb->get_row("Select * from wp_wpcw_courses where course_id =" . $courseID, OBJECT);
	$slug_addon ='bpmissouri';
        $wpdb->insert( 
	'wp_wpcw_courses', 
	array( 
		'course_title' => $courseTitle,
		'course_desc'   => $courseRow->course_desc,
		'course_opt_completion_wall' => $courseRow->course_opt_completion_wall,
		'course_opt_use_certificate' => $courseRow->course_opt_use_certificate,
		'course_opt_user_access' => $courseRow->course_opt_user_access,
		'course_unit_count' => $courseRow->course_unit_count,
		'course_from_name' => $courseRow->course_from_name,
		'course_from_email' => $courseRow->course_from_email,
		'course_to_email' => $courseRow->course_to_email,
		'course_message_unit_complete' => $courseRow->course_message_unit_complete,
		'course_message_course_complete' => $courseRow->course_message_course_complete,
		'course_message_unit_not_logged_in' => $courseRow->course_message_unit_not_logged_in,
		'course_message_unit_pending' => $courseRow->course_message_unit_pending,
		'course_message_unit_no_access' => $courseRow->course_message_unit_no_access,
		'course_message_unit_not_yet' => $courseRow->course_message_unit_not_yet,
		'course_message_quiz_open_grading_blocking' => $courseRow->course_message_quiz_open_grading_blocking,
		'course_message_quiz_open_grading_non_blocking' => $courseRow->course_message_quiz_open_grading_non_blocking,
		'email_complete_module_option_admin' => $courseRow->email_complete_module_option_admin,
		'email_complete_module_option' => $courseRow->email_complete_module_option,
		'email_complete_module_subject' => $courseRow->email_complete_module_subject,
		'email_complete_module_body' => $courseRow->email_complete_module_body,
		'email_complete_course_option_admin' => $courseRow->email_complete_course_option_admin,
		'email_complete_course_option' => $courseRow->email_complete_course_option,
		'email_complete_course_subject' => $courseRow->email_complete_course_subject,
		'email_complete_course_body' => $courseRow->email_complete_course_body,
		'email_quiz_grade_option' => $courseRow->email_quiz_grade_option,
		'email_quiz_grade_subject' => $courseRow->email_quiz_grade_subject,
		'email_quiz_grade_body' => $courseRow->email_quiz_grade_body,
		'email_complete_course_grade_summary_subject' => $courseRow->email_complete_course_grade_summary_subject,
		'email_complete_course_grade_summary_body' => $courseRow->email_complete_course_grade_summary_body,
	        ), 
	array( 
		'%s', 
		'%s',
		'%s',
		'%s',
		'%s',
		'%d',
		'%s',
		'%s',
		'%s',
		'%s',
		'%s',
		'%s',
		'%s',
		'%s',
		'%s',
		'%s',
		'%s',
		'%s',
		'%s',
		'%s',
		'%s',
		'%s',
		'%s',
		'%s',
		'%s',
		'%s',
		'%s',
		'%s',
		'%s',
		'%s',		
		) 
	);
$wpdb->print_error();
$newCourseID = $wpdb->insert_id;
echo "new course id is " .$newCourseID;  
//select the modules and create new ones,save the module_ids into aOriginalModules aNewModules
$rows = $wpdb->get_results("select * from wp_wpcw_modules where parent_course_id =". $courseID, OBJECT);
$i = 0 ;
echo "<br> select for modules is select * from wp_wpcw_modules where parent_course_id =". $courseID;
foreach ($rows as $item){
$aOriginalModules[$i] = $item->module_id;
//do and insert and save the new module id

$wpdb->insert( 
	'wp_wpcw_modules', 
	array( 
		'parent_course_id' => $newCourseID,
		'module_title'   => $item->module_title,
		'module_desc' => $item->module_desc,
		'module_order' => $item->module_order,
		'module_number' => $item->module_number,
),
       array( 
		'%d',
		'%s',
		'%s',
		'%d',
		'%d',
)
);

$newModuleID = $wpdb->insert_id;
echo "<br>new module id is " . $newModuleID ;
$aNewModules[$i] = $newModuleID;
$i++;
}
echo "<br>new modules are ";
print_r($aNewModules);
echo "<br>original modules are ";
print_r($aOriginalModules);
$quizRows = $wpdb->get_results("select * from wp_posts where id in (Select parent_unit_id from wp_wpcw_quizzes where parent_course_id =". $courseID .")", OBJECT);
$i =0;
foreach ($quizRows as $item){
$originalPostID =  $item->ID;
//insert a new post
// Create post object
$my_post = array(
  'post_title'            => $item->post_title,
  'post_status'           => $item->post_status,
  'post_type'             => $item->post_type,
  'post_author'           => $item->post_author, 
  'ping_status'           => $item->ping_status,
  'post_parent'           => $item->post_parent,
  'menu_order'            => $item->menu_order, 
  'to_ping'               => $item->to_ping ,
  'pinged'                => $item->pinged,  
  'post_content'          => $item->post_content,  
  'post_name'             => $item->post_name,  
  'post_password'         => $item->post_password, 
  'guid'                  => $item-> guid,
  'comment_status'        => $item->comment_status, 
  'post_excerpt'          => $item-> post_excerpt ,  
  'import_id'             => $item-> import_id ,
  'post_category' =>      array($categoryids),
);
// Insert the post into the database
$inserted_post_id = wp_insert_post( $my_post );
wp_unique_post_slug( $item->post_name."-".$slug_addon, $inserted_post_id, $item->ping_status, $item->post_type, 0 );
		//update the post-meta
		$postmetarows = $wpdb->get_results("Select * from wp_postmeta where post_id =" . $item->ID, OBJECT);
		foreach ($postmetarows as $item){
		$wpdb->insert( 
				'wp_postmeta', 
			array( 
				'post_id' => $inserted_post_id ,
				'meta_key'   => $item->meta_key,
				'meta_value' => $item->meta_value,
		),
		       array( 
				'%d',
				'%s',
				'%s',		
		)
		);
		}
$aNewQuizPostIDs[$i] = $inserted_post_id;
$i++;
//get the quiz for the original post id
$iniquiz = $wpdb->get_row("select * from wp_wpcw_quizzes where parent_unit_id=" . $originalPostID);
//get the original id
$originalQuizID = $iniquiz->quiz_id;
//insert a new quiz // get the id of the new quiz
 $wpdb->insert( 
		'wp_wpcw_quizzes', 
			array( 
				'quiz_title' => $iniquiz->quiz_title. ' '. $slug_addon,
				'quiz_desc'   => $iniquiz->quiz_desc,
				'parent_unit_id' => $inserted_post_id,
				'parent_course_id' => $newCourseID,
				'quiz_type' => $iniquiz->quiz_type,
				'quiz_pass_mark' => $iniquiz->quiz_pass_mark,
				'quiz_show_answers' => $iniquiz->quiz_show_answers,
				'show_answers_settings' => $iniquiz->show_answers_settings,
				'quiz_show_survey_responses' => $iniquiz->quiz_show_survey_responses,
		),
		       array( 
				'%s',
				'%s',
				'%d',
				'%d',
				'%s',
				'%d',
				'%s',
				'%s',
				'%s',				
		)
		);
		
$newQuizID=$wpdb->insert_id;
//select quiz questions based on the oroginal quiz id
$iniquizquestions = $wpdb->get_results("Select * from wp_wpcw_quizzes_questions where parent_quiz_id=" . $originalQuizID);
//loop through the questions and make new quiz questions with the new quiz id that match the original questions
$questionCount= $wpdb->num_rows;
$insertedRows = 0;	
	foreach ($iniquizquestions as $item){
//insert new quiz questions for the new quiz id	
	$newQuestionID= $wpdb->insert( 
		'wp_wpcw_quizzes_questions', 
			array( 
			'parent_quiz_id'=>$newQuizID,
			'question_type' => $item->question_type,
			'question_question' =>$item->question_question,
			'question_answers' =>$item->question_answers,
			'question_data_answers' =>$item->question_data_answers,
			'question_correct_answer' =>$item->question_correct_answer,
			'question_answer_type' =>$item->question_answer_type,
			'question_order' =>$item->question_order,
			'question_answer_hint' =>$item->question_answer_hint,
			'question_answer_explanation' =>$item->question_answer_explanation,
			'question_image' =>$item->question_image,
			'question_answer_file_types' => $item->question_answer_file_types,
		),
		       array( 
				'%d',
				'%s',
				'%s',
				'%s',
				'%s',
				'%s',
				'%s',
				'%d',
				'%s',
				'%s',
				'%s',
				'%s',				
		)
		);
		if ($newQuestionID >0 ){ $insertedRows++;}
	}	
print_r($aNewQuizPostIDs);
//associate the quiz with the course and module get the linkage out of the course_units_meta table for the original post ids.
$unitmeta=$wpdb->get_row("select * from wp_wpcw_units_meta where unit_id = ".$originalPostID);
//get the correct new module to use for the insert
for ($i=0; $i<count($aOriginalModules); $i++){
       if ($unitmeta->parent_module_id == $aOriginalModules[$i]){
        $moduleIDtouse = $aNewModules[$i];
	}
	
	//now insert a new unit meta record
               $unitmetaresult = $wpdb->insert( 
		'wp_wpcw_units_meta', 
		       array( 
		        'unit_id' => $inserted_post_id,
			'parent_module_id' => $moduleIDtouse,
			'parent_course_id' => $newCourseID,
			'unit_order' => $unitmeta->unit_order,
			'unit_number' => $unitmeta->unit_number,
                ),
		       array( 
				'%d',
				'%d',
				'%d',
				'%d',
				'%d',
		)
		);
}
//now the quiz should be associated with the course and course module
}//end foreach quiz

//************************************************************ now handle all the other post units that are not quizzes
//get the units that are not associated with quizzez
$posts = $wpdb->get_results("select * from wp_posts where id  in (Select unit_id from wp_wpcw_units_meta where parent_course_id =4 and unit_id not in (Select parent_unit_id from wp_wpcw_quizzes where parent_course_id =". $courseID ."))", OBJECT);
//foreach one create a new post
$i = 0;
foreach ($posts as $item){
$originalPostID =  $item->ID;
	// Create post object
	$my_post = array(
	  'post_title'            => $item->post_title,
	  'post_status'           => $item->post_status,
	  'post_type'             => $item->post_type,
	  'post_author'           => $item->post_author, 
	  'ping_status'           => $item->ping_status,
	  'post_parent'           => $item->post_parent,
	  'menu_order'            => $item->menu_order, 
	  'to_ping'               => $item->to_ping ,
	  'pinged'                => $item->pinged,   
	  'post_password'         => $item->post_password, 
	  'guid'                  => $item-> guid,
	  'post_content'          => $item->post_content, 
          'comment_status'        => $item->comment_status, 	  
          'post_name'             => $item->post_name."-".$slug_addon, 
	  'post_excerpt'          => $item-> post_excerpt ,  
	  'import_id'             => $item-> import_id ,
	  'post_category' =>      array($categoryids),
	);
	// Insert the post into the database
	$inserted_post_id = wp_insert_post( $my_post );
	//set a unique page slug
	wp_unique_post_slug( $item->post_name."-".$slug_addon, $inserted_post_id, $item->ping_status, $item->post_type, 0 );
       //add the meta record that goes with it.
		
		$postmetarows = $wpdb->get_results("Select * from wp_postmeta where post_id =" . $item->ID, OBJECT);
		foreach ($postmetarows as $item){
		$wpdb->insert( 
				'wp_postmeta', 
			array( 
				'post_id' => $inserted_post_id ,
				'meta_key'   => $item->meta_key,
				'meta_value' => $item->meta_value,
		),
		       array( 
				'%d',
				'%s',
				'%s',		
		)
		);
		}
$aNewPostIDs[$i] = $inserted_post_id;
$i++;
//associate the units with the correct course and module
$unitmeta=$wpdb->get_row("select * from wp_wpcw_units_meta where unit_id = ".$originalPostID);
//get the correct new module to use for the insert
for ($i=0; $i< count($aOriginalModules); $i++){
	if ($unitmeta->parent_module_id == $aOriginalModules[$i]){
        $moduleIDtouse = $aNewModules[$i];
	}
}
	//now insert a new unit meta record
               $unitmetaresult = $wpdb->insert( 
		'wp_wpcw_units_meta', 
		       array( 
		        'unit_id' => $inserted_post_id,
			'parent_module_id' => $moduleIDtouse,
			'parent_course_id' => $newCourseID,
			'unit_order' => $unitmeta->unit_order,
			'unit_number' => $unitmeta->unit_number,
                ),
		       array( 
				'%d',
				'%d',
				'%d',
				'%d',
				'%d',
		)
		);
}
*/
//get all the users who are active and add access to the learning module
$allusers= $wpdb->get_results('Select ID from wp_users',OBJECT);
$newCourseID =  $courseID;
foreach ($allusers as $item){
//loop through the users table and add access to the course for each user
$userid=$wpdb->get_var("Select user_id from wp_wpcw_user_courses where user_id = " . $item->ID . " and course_id=" . $newCourseID);
if ($userid <= 0){
		$wpdb->insert( 
				'wp_wpcw_user_courses', 
			array( 
			 'user_id' => $item->ID,
		         'course_id' => $newCourseID,
		         'course_progress' => 0,
		),
		       array( 
				'%d',
				'%d',
				'%d',		
		)
		);
}
}
echo "all done.";






      
























































      ?>
<script src="<?php bloginfo('template_directory');?>/js/jquery.alerts.js" type="text/javascript"></script>
<link rel="stylesheet" type="text/css" href="<?php bloginfo('template_directory');?>/portfolio_module_style.css?v=<?php echo time(); ?>" media="screen" />
<link rel="stylesheet" type="text/css" href="<?php bloginfo('template_directory');?>/jquery.alerts.css?v=<?php echo time(); ?>" media="screen" />
<section class="content">
<?php get_template_part('inc/page-title'); ?>	
    <div class="pad group">
		<article>
		<div style="padding-left: 30px;">
			<?php the_content(); 
			echo $insertedID;
		        ?>
		</div><!--/.entry-->
	</article>
</div><!--/.pad-->
</section><!--/.content-->
					
<?php get_sidebar(); ?>
<?php 	get_footer(); ?> 

